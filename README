John Stuart and Jose Rodriguez's Assignment 2

--------------------------
I Introduction
--------------------------
This program is a basic shell that functions as a terminal. It will take in the commands that the user desires and executes them if they are legal syntax.

--------------------------
II Format of Commands
--------------------------
 The commands are accepted in the following format:
A command that is followed by a connector(in this program connectors are ";", "&&", and "||"). There are no limits as to how many commands you want to execute. You just have to make sure that there is a connector between any two commands.

	Example of a single command: ls -a
	
	Example of multiple commands: ls -a; echo hello || git status; echo Soviet Russia

This shell also supports test commands that can be written in two different ways:
	test -e /file/path
	or
	[ -e /test/file/path ]

	-e is the flag to be run, this program can run the following flags:

	-e 	checks if the file/directory exists
	-f	checks if file/directory exists and is a regular file
	-d 	checks if the file/directory exists and is a directory
	
	After a flag is run, the program will print "(True)" or "(False)" in the terminal.

	Note: if the user does not specify a flag, then the test by default will have the flag -e.

These tests can be added in place of a command. 
	Example of test added: [ -e /test/file/path ] && echo this works

Parenthesis can be placed to determine precedence of the connectors.
 
	Example: echo one || ( echo two && echo three)
	This command line will only output echo one.

--------------------------
III Other Functionality
--------------------------
- This shell contains an exit command. When "exit" is typed into the command prompt, the terminal will close.  

- If "#" is input at any time within the command line, anything after "#" inlcuding itself will be read as a comment and be ignored.

	Example of comment: echo Taco Bell; # ls; echo disneyland is overrated
	This command line will only perform the task "echo Taco Bell".

- This program can take in as many parenthesis as long as they are in proper format. 
	
	Example: "(((((echo 1)))))"

	Example2: "((echo 1 && echo 2))"

This program can take in nested parenthesis.

	Example "((echo 1 && (echo 2 || echo 3 ; echo 3 ; echo 4) && echo 5) && echo 6) && echo 7"


-------------------------
IV Known bugs/Limitations
-------------------------
- The program does not work if the user does not input the correct characters for the connectors (ex. "&" instead of "&&").

- A single command with a connector is not accepted.
	
	Example: echo chipotle is not authentic;

- If inputting parenthesis, they need to be formatted correctly (in correct order and there needs to be a correct number of them).

	Example: (command1)) || (command2 && command3 )(
	
	Example2: command1( (
	
	These command lines will not work since the parenthesis is not in proper format.
	
- There must be whitespaces seperating parenthesis and connectors.

	Example: "(echo 1)&&(echo2)" <-- wrong! "(echo 1) && (echo 2)" <-- correct!
	
	Example2: "(echo 1);(echo2)" <-- wrong! "(echo 1) ; (echo 2)" <-- correct!
-------------------------
V Requirements
-------------------------
- You need the boost library in order to run this program
- Run this in commandline if you don't already have it "$ apt-get install libboost-dev"
